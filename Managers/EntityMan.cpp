//////////////////////////////////////////////////////////////////////////////////////////
// File:            EntityMan.cpp
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Source file for the EntityMan class.
// Project:         Retro Terrain Engine
// Author(s):       Daniel Tabar
//                  data@datarealms.com
//                  http://www.datarealms.com


//////////////////////////////////////////////////////////////////////////////////////////
// Inclusions of header files

#include "EntityMan.h"
//#include "AHuman.h"
//#include "MOPixel.h"
//#include "SLTerrain.h"
//#include "AtomGroup.h"
//#include "Atom.h"

using namespace std;

namespace RTE
{

const string EntityMan::m_ClassName = "EntityMan";


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Clear
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Clears all the member variables of this EntityMan, effectively
//                  resetting the members of this abstraction level only.

void EntityMan::Clear()
{
//    m_ConcreteTypeNames.clear();
}

/*
//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Makes the EntityMan entity ready for use.

int EntityMan::Create()
{

    return 0;
}
*/

//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Makes the EntityMan entity ready for use.

int EntityMan::Create()
{
    

    return 0;
}

/*
//////////////////////////////////////////////////////////////////////////////////////////
// Virtual method:  Save
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Saves the complete state of this EntityMan with a Writer for
//                  later recreation with Create(Reader &reader);

int EntityMan::Save(Writer &writer) const
{
    writer << m_Actors.size();
    for (list<Actor *>::const_iterator itr = m_Actors.begin(); itr != m_Actors.end(); ++itr)
        writer << **itr;

    writer << m_Particles.size();
    for (list<MovableEntity *>::const_iterator itr2 = m_Particles.begin(); itr2 != m_Particles.end(); ++itr2)
        writer << **itr2;

    return 0;
}
*/

//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Destroy
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destroys and resets (through Clear()) the EntityMan entity.

void EntityMan::Destroy()
{
    Clear();
}

/* Now done in ClassInfo
//////////////////////////////////////////////////////////////////////////////////////////
// Method:          AssignConcreteTypeID
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Assigns a new Concrete Entity Type ID to whomever called this.

int EntityMan::AssignConcreteTypeID(string typeName)
{
    m_ConcreteTypeNames.push_back(typeName);
    return m_ConcreteTypeNames.size() - 1;
}
*/
} // namespace RTE