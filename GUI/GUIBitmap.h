#ifndef _GUIBITMAP_
#define _GUIBITMAP_

//////////////////////////////////////////////////////////////////////////////////////////
// File:            GUIBitmap.h
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     GUIBitmap class
// Project:         GUI Library
// Author(s):       Jason Boettcher
//                  jackal@shplorb.com
//                  www.shplorb.com/~jackal

#include "GUI.h"


namespace RTE
{


//////////////////////////////////////////////////////////////////////////////////////////
// Class:           GUIBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     An interface class inherited by the different types of bitmap 
//                  methods
// Parent(s):       None.
// Class history:   12/30/2003 GUIBitmap Created.

class GUIBitmap {

//////////////////////////////////////////////////////////////////////////////////////////
// Public member variable, method and friend function declarations

public:


//////////////////////////////////////////////////////////////////////////////////////////
// Constructor:     GUIBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Constructor method used to instantiate a GUIBitmap object in system
//                  memory.
// Arguments:       None.

    GUIBitmap() { };


//////////////////////////////////////////////////////////////////////////////////////////
// Destructor:      ~GUIBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destructor method used to clean up a GUIBitmap object before deletion
//                  from system memory.
// Arguments:       None.

    virtual ~GUIBitmap() { Destroy(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  Destroy
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destroys and frees the bitmap
// Arguments:       None.

    virtual void Destroy(void) { };


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  Draw
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draw a section of this bitmap onto another bitmap
// Arguments:       Destination Bitmap, Position, Size

    virtual void Draw(GUIBitmap *pDestBitmap, int X, int Y, RECT *Rect) {};


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  DrawTrans
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draw a section of this bitmap onto another bitmap ignoring 
//                  color-keyed pixels
// Arguments:       Destination Bitmap, Position, Size

    virtual void DrawTrans(GUIBitmap *pDestBitmap, int X, int Y, RECT *Rect) {};


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  DrawTransScaled
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draw this bitmap scaled onto another bitmap ignoring color-keyed pixels.
// Arguments:       Destination Bitmap, Position, Size

    virtual void DrawTransScaled(GUIBitmap *pDestBitmap, int X, int Y, int width, int height) {};


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  DrawLine
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws a line.
// Arguments:       Start Position, End Position, Color.

    virtual void DrawLine(int x1, int y1, int x2, int y2, Uint32 Color) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  DrawRectangle
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws a rectangle.
// Arguments:       Position, Size, Color, Filled.

    virtual void DrawRectangle(int X, int Y, int Width, int Height, Uint32 Color, 
                               bool Filled) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetPixel
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the color of a pixel at a specific point.
// Arguments:       Point.

    virtual Uint32 GetPixel(int X, int Y) { return 0; };


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  SetPixel
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the color of a pixel at a specific point.
// Arguments:       Point, Color.

    virtual void SetPixel(int X, int Y, Uint32 Color) { };


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetWidth
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the Width of the bitmap.
// Arguments:       None.

    virtual int GetWidth(void) { return 0; };


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetHeight
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the Height of the bitmap.
// Arguments:       None.

    virtual int GetHeight(void) { return 0; };


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetColorKey
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the color key of the bitmap.
// Arguments:       ColorKey.

    virtual void SetColorKey(Uint32 Key) {};


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetColorKey
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the color key of the bitmap to teh color of the pixel in teh
//                  upper right corner of the bitmap.
// Arguments:       ColorKey.

    virtual void SetColorKey() {};


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetColorDepth
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the number of bits per pixel color depth of this bitmap.
// Returns:         8, 16, 32 etc

    virtual int GetColorDepth() { return 0; };


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  GetClipRect
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the clipping rectangle of the bitmap.
// Arguments:       Pointer to RECT struct to fill out.

    virtual void GetClipRect(RECT *Rect) {};


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  SetClipRect
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the clipping rectangle of the bitmap.
// Arguments:       Rectangle pointer. 0 for no clipping.

    virtual void SetClipRect(RECT *Rect) {};


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:  AddClipRect
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the clipping rectangle of the specified bitmap as the
//                  intersection of its current clipping rectangle and the rectangle
//                  described by the passed-in rect. 
// Arguments:       Rectangle pointer.

    virtual void AddClipRect(RECT *Rect) {};


//////////////////////////////////////////////////////////////////////////////////////////
// Pure v. method:  GetDataPath
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Returns the path to the datafile object this GUIBitmap uses.
// Arguments:       None.

    virtual std::string GetDataPath() = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Pure v. method:  HasBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Indicates whether this GUI bitmap even contains loaded bitmap data.
// Arguments:       None.
// Returns:         Whether this contains bitmap data or not.

    virtual bool HasBitmap() = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Private member variable and method declarations

protected:


};


}; // namespace RTE


#endif  //  _GUIbitmap_
