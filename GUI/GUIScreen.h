#ifndef _GUISCREEN_
#define _GUISCREEN_

//////////////////////////////////////////////////////////////////////////////////////////
// File:            GUIScreen.h
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     GUIScreen class
// Project:         GUI Library
// Author(s):       Jason Boettcher
//                  jackal@shplorb.com
//                  www.shplorb.com/~jackal


namespace RTE
{


//////////////////////////////////////////////////////////////////////////////////////////
// Class:           GUIScreen
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     An interface class inherited by the different types of graphics 
//                  methods
// Parent(s):       None.
// Class history:   12/30/2003 GUIScreen Created.

class GUIScreen {

//////////////////////////////////////////////////////////////////////////////////////////
// Public member variable, method and friend function declarations

public:


//////////////////////////////////////////////////////////////////////////////////////////
// Constructor:     GUIScreen
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Constructor method used to instantiate a GUIScreen object in system
//                  memory.
// Arguments:       None.

    GUIScreen() { };


//////////////////////////////////////////////////////////////////////////////////////////
// Destructor:      GUIScreen
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destructor method used to clean up a GUIScreen object in
//                  system memory.
// Arguments:       None.

    virtual ~GUIScreen() { Destroy(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:    Destroy
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Destroy the screen
// Arguments:       None.

    virtual void Destroy(void) { ; }


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:    CreateBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Creates a bitmap from a file
// Arguments:       Filename

    virtual GUIBitmap *CreateBitmap(const std::string Filename) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:    CreateBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Creates an empty bitmap
// Arguments:       Width and Height

    virtual GUIBitmap *CreateBitmap(int Width, int Height) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:    DrawBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws a bitmap onto the back buffer
// Arguments:       Bitmap, destination position, source rectangle

    virtual void DrawBitmap(GUIBitmap *Bitmap, int X, int Y, RECT *Rect) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:    DrawBitmapTrans
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws a bitmap onto the back buffer using the colorkey.
// Arguments:       Bitmap, destination position, source rectangle

    virtual void DrawBitmapTrans(GUIBitmap *Bitmap, int X, int Y, RECT *Rect) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:    GetBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets a bitmap representing the screen.
// Arguments:       None.

    virtual GUIBitmap *GetBitmap(void) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Virtual Method:    ConvertColor
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Converts an 8bit palette index to a valid pixel format.
//                  Primarily used for development in windowed mode.
// Arguments:       Color value in any bit depth. Will be converted to the format specified.
//                  An optional target color depth that will determine what format the color
//                  should be converted to. If this is 0, then the current video color depth
//                  will be used as target.
    
    virtual Uint32 ConvertColor(Uint32 color, int targetDepth = 0) = 0;


//////////////////////////////////////////////////////////////////////////////////////////
// Private member variable and method declarations

protected:

};


}; // namespace RTE


#endif  //  _GUISCREEN_